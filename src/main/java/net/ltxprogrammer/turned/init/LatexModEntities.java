package net.ltxprogrammer.turned.init;

import net.ltxprogrammer.changed.entity.LatexEntity;
import net.ltxprogrammer.turned.LatexMod;
import net.ltxprogrammer.turned.entity.AHVHertxEntity;
import net.ltxprogrammer.turned.entity.AHVHertxSitEntity;
import net.ltxprogrammer.turned.entity.AR70AssaultRifleEntity;
import net.ltxprogrammer.turned.entity.AllydroppodEntity;
import net.ltxprogrammer.turned.entity.ArmedDroneHertxEntity;
import net.ltxprogrammer.turned.entity.ArmedDroneHertxWaitEntity;
import net.ltxprogrammer.turned.entity.AshburyHertxEntity;
import net.ltxprogrammer.turned.entity.AshburySitEntity;
import net.ltxprogrammer.turned.entity.BeeHertxEntity;
import net.ltxprogrammer.turned.entity.BeeHertxSitEntity;
import net.ltxprogrammer.turned.entity.CivilianEntity;
import net.ltxprogrammer.turned.entity.CivilianMilitiaMeleeEntity;
import net.ltxprogrammer.turned.entity.CivlianMilitiaEntity;
import net.ltxprogrammer.turned.entity.CrystalbowEntity;
import net.ltxprogrammer.turned.entity.DLbeeEntity;
import net.ltxprogrammer.turned.entity.DROPPODEntity;
import net.ltxprogrammer.turned.entity.DarkLatexCakeEntity;
import net.ltxprogrammer.turned.entity.DarkLatexCentaurEntity;
import net.ltxprogrammer.turned.entity.DarkLatexCreeperEnhancedEntity;
import net.ltxprogrammer.turned.entity.DarkLatexCreeperEntity;
import net.ltxprogrammer.turned.entity.DarkLatexFoxEntity;
import net.ltxprogrammer.turned.entity.DarkLatexFoxScientistEntity;
import net.ltxprogrammer.turned.entity.DarkLatexFoxSniperEntity;
import net.ltxprogrammer.turned.entity.DarkLatexMothEntity;
import net.ltxprogrammer.turned.entity.DarkLatexQueenBeeEntity;
import net.ltxprogrammer.turned.entity.DarkLatexSkeletonEntity;
import net.ltxprogrammer.turned.entity.DarkLatexSnakeEntity;
import net.ltxprogrammer.turned.entity.DarkLatexSnepEntity;
import net.ltxprogrammer.turned.entity.DarkLatexSpiderEntity;
import net.ltxprogrammer.turned.entity.DarkLatexSpiderQueenEntity;
import net.ltxprogrammer.turned.entity.DarklatexEntity;
import net.ltxprogrammer.turned.entity.DarklatexconeEntity;
import net.ltxprogrammer.turned.entity.DarklatexslugEntity;
import net.ltxprogrammer.turned.entity.DartrifleEntity;
import net.ltxprogrammer.turned.entity.DlSquidDogEntity;
import net.ltxprogrammer.turned.entity.DlsharkEntity;
import net.ltxprogrammer.turned.entity.DroneHertxEntity;
import net.ltxprogrammer.turned.entity.DroneHertxWaitEntity;
import net.ltxprogrammer.turned.entity.EvilMilitaryEntity;
import net.ltxprogrammer.turned.entity.EvilScientistEntity;
import net.ltxprogrammer.turned.entity.EvilSniperEntity;
import net.ltxprogrammer.turned.entity.ExplosivegooEntity;
import net.ltxprogrammer.turned.entity.FlamethowerEntity;
import net.ltxprogrammer.turned.entity.HertxEntity;
import net.ltxprogrammer.turned.entity.HertxFBSitEntity;
import net.ltxprogrammer.turned.entity.HertxFSitEntity;
import net.ltxprogrammer.turned.entity.HertxSitEntity;
import net.ltxprogrammer.turned.entity.HertxSolWaitEntity;
import net.ltxprogrammer.turned.entity.HertxvarFBEntity;
import net.ltxprogrammer.turned.entity.HertxvarFEntity;
import net.ltxprogrammer.turned.entity.HertxvarSolEntity;
import net.ltxprogrammer.turned.entity.La4tankmorphmEntity;
import net.ltxprogrammer.turned.entity.La4tankmorphrEntity;
import net.ltxprogrammer.turned.entity.LatexDartRifleEntity;
import net.ltxprogrammer.turned.entity.LatexDropPodEntity;
import net.ltxprogrammer.turned.entity.LatexcannonEntity;
import net.ltxprogrammer.turned.entity.M4AssaultRifleEntity;
import net.ltxprogrammer.turned.entity.MatchLockMusketEntity;
import net.ltxprogrammer.turned.entity.MatchlockPistolEntity;
import net.ltxprogrammer.turned.entity.MilitaryEntity;
import net.ltxprogrammer.turned.entity.MilitaryRiotEntity;
import net.ltxprogrammer.turned.entity.MilitaryflameunitEntity;
import net.ltxprogrammer.turned.entity.NXTHertxEntity;
import net.ltxprogrammer.turned.entity.NXTSitEntity;
import net.ltxprogrammer.turned.entity.NoiseStalkerEntity;
import net.ltxprogrammer.turned.entity.OverundershotgunEntity;
import net.ltxprogrammer.turned.entity.PrisionerEntity;
import net.ltxprogrammer.turned.entity.PrisionerMilitiaMeleeEntity;
import net.ltxprogrammer.turned.entity.PrisionermilitiaEntity;
import net.ltxprogrammer.turned.entity.ProtectorSlimelingEntity;
import net.ltxprogrammer.turned.entity.ProtectorSlimelingsitEntity;
import net.ltxprogrammer.turned.entity.RevolvingGooCannonEntity;
import net.ltxprogrammer.turned.entity.ScientistEntity;
import net.ltxprogrammer.turned.entity.ScrapM16RifleEntity;
import net.ltxprogrammer.turned.entity.SlimelingEntity;
import net.ltxprogrammer.turned.entity.SlimelingTamedEntity;
import net.ltxprogrammer.turned.entity.SlimelingtamedsitEntity;
import net.ltxprogrammer.turned.entity.SneppleEntity;
import net.ltxprogrammer.turned.entity.TSCBerserkEntity;
import net.ltxprogrammer.turned.entity.TSCHunterEntity;
import net.ltxprogrammer.turned.entity.TSCOutsiderEntity;
import net.ltxprogrammer.turned.entity.TSCOutsiderGunnerEntity;
import net.ltxprogrammer.turned.entity.TSCPistolEntity;
import net.ltxprogrammer.turned.entity.TSCdroneEntity;
import net.ltxprogrammer.turned.entity.TankCannonEntity;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.MobCategory;
import net.minecraftforge.event.entity.EntityAttributeCreationEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.RegistryObject;

@Mod.EventBusSubscriber(bus = Mod.EventBusSubscriber.Bus.MOD)
/* loaded from: turned-730838-4352793_mapped_official_1.18.2.jar:net/ltxprogrammer/turned/init/LatexModEntities.class */
public class LatexModEntities {
    public static final DeferredRegister<EntityType<?>> REGISTRY = DeferredRegister.create(ForgeRegistries.ENTITIES, LatexMod.MODID);
    public static final RegistryObject<EntityType<SlimelingEntity>> SLIMELING = register("slimeling", EntityType.Builder.of(SlimelingEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(SlimelingEntity::new).sized(0.6f, 2.0f));
    public static final RegistryObject<EntityType<DarklatexslugEntity>> DARKLATEXSLUG = register("darklatexslug", EntityType.Builder.of(DarklatexslugEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(24).setUpdateInterval(3).setCustomClientFactory(DarklatexslugEntity::new).sized(0.8f, 0.4f));
    public static final RegistryObject<EntityType<DarklatexEntity>> DARKLATEX = register("darklatex", EntityType.Builder.of(DarklatexEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(DarklatexEntity::new).sized(0.6f, 1.8f));
    public static final RegistryObject<EntityType<DarkLatexCentaurEntity>> DARK_LATEX_CENTAUR = register("dark_latex_centaur", EntityType.Builder.of(DarkLatexCentaurEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(DarkLatexCentaurEntity::new).sized(1.2f, 2.25f));
    public static final RegistryObject<EntityType<DarkLatexSkeletonEntity>> DARK_LATEX_SKELETON = register("dark_latex_skeleton", EntityType.Builder.of(DarkLatexSkeletonEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(DarkLatexSkeletonEntity::new).sized(0.6f, 1.8f));
    public static final RegistryObject<EntityType<NoiseStalkerEntity>> NOISE_STALKER = register("noise_stalker", EntityType.Builder.of(NoiseStalkerEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(48).setUpdateInterval(3).setCustomClientFactory(NoiseStalkerEntity::new).sized(0.8f, 2.2f));
    public static final RegistryObject<EntityType<DlsharkEntity>> DLSHARK = register("dlshark", EntityType.Builder.of(DlsharkEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(DlsharkEntity::new).sized(0.6f, 1.8f));
    public static final RegistryObject<EntityType<DarkLatexMothEntity>> DARK_LATEX_MOTH = register("dark_latex_moth", EntityType.Builder.of(DarkLatexMothEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(DarkLatexMothEntity::new).sized(0.6f, 2.0f));
    public static final RegistryObject<EntityType<DarkLatexSnepEntity>> DARK_LATEX_SNEP = register("dark_latex_snep", EntityType.Builder.of(DarkLatexSnepEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(DarkLatexSnepEntity::new).sized(0.6f, 2.0f));
    public static final RegistryObject<EntityType<DarkLatexFoxEntity>> DARK_LATEX_FOX = register("dark_latex_fox", EntityType.Builder.of(DarkLatexFoxEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(DarkLatexFoxEntity::new).sized(0.6f, 1.8f));
    public static final RegistryObject<EntityType<DarkLatexFoxSniperEntity>> DARK_LATEX_FOX_SNIPER = register("dark_latex_fox_sniper", EntityType.Builder.of(DarkLatexFoxSniperEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(DarkLatexFoxSniperEntity::new).sized(0.6f, 1.9f));
    public static final RegistryObject<EntityType<DarkLatexSnakeEntity>> DARK_LATEX_SNAKE = register("dark_latex_snake", EntityType.Builder.of(DarkLatexSnakeEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(124).setUpdateInterval(3).setCustomClientFactory(DarkLatexSnakeEntity::new).sized(0.6f, 1.9f));
    public static final RegistryObject<EntityType<DarkLatexSpiderEntity>> DARK_LATEX_SPIDER = register("dark_latex_spider", EntityType.Builder.of(DarkLatexSpiderEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(DarkLatexSpiderEntity::new).sized(0.8f, 2.0f));
    public static final RegistryObject<EntityType<DlSquidDogEntity>> DL_SQUID_DOG = register("dl_squid_dog", EntityType.Builder.of(DlSquidDogEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(DlSquidDogEntity::new).sized(0.8f, 2.2f));
    public static final RegistryObject<EntityType<DLbeeEntity>> D_LBEE = register("d_lbee", EntityType.Builder.of(DLbeeEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(DLbeeEntity::new).sized(0.6f, 1.9f));
    public static final RegistryObject<EntityType<DarkLatexQueenBeeEntity>> DARK_LATEX_QUEEN_BEE = register("dark_latex_queen_bee", EntityType.Builder.of(DarkLatexQueenBeeEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(DarkLatexQueenBeeEntity::new).sized(0.8f, 2.0f));
    public static final RegistryObject<EntityType<DarkLatexSpiderQueenEntity>> DARK_LATEX_SPIDER_QUEEN = register("dark_latex_spider_queen", EntityType.Builder.of(DarkLatexSpiderQueenEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(DarkLatexSpiderQueenEntity::new).sized(1.2f, 3.6f));
    public static final RegistryObject<EntityType<DarklatexconeEntity>> DARKLATEXCONE = register("darklatexcone", EntityType.Builder.of(DarklatexconeEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(84).setUpdateInterval(3).setCustomClientFactory(DarklatexconeEntity::new).sized(0.6f, 1.8f));
    public static final RegistryObject<EntityType<HertxEntity>> HERTX = register("hertx", EntityType.Builder.of(HertxEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(HertxEntity::new).sized(0.7f, 2.0f));
    public static final RegistryObject<EntityType<DroneHertxEntity>> DRONE_HERTX = register("drone_hertx", EntityType.Builder.of(DroneHertxEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(108).setUpdateInterval(3).setCustomClientFactory(DroneHertxEntity::new).fireImmune().sized(0.7f, 2.0f));
    public static final RegistryObject<EntityType<ArmedDroneHertxEntity>> ARMED_DRONE_HERTX = register("armed_drone_hertx", EntityType.Builder.of(ArmedDroneHertxEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(116).setUpdateInterval(3).setCustomClientFactory(ArmedDroneHertxEntity::new).fireImmune().sized(0.7f, 2.0f));
    public static final RegistryObject<EntityType<ScientistEntity>> SCIENTIST = register("scientist", EntityType.Builder.of(ScientistEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(ScientistEntity::new).sized(0.6f, 1.8f));
    public static final RegistryObject<EntityType<MilitaryEntity>> MILITARY = register("military", EntityType.Builder.of(MilitaryEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(MilitaryEntity::new).sized(0.6f, 1.8f));
    public static final RegistryObject<EntityType<MilitaryflameunitEntity>> MILITARYFLAMEUNIT = register("militaryflameunit", EntityType.Builder.of(MilitaryflameunitEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(MilitaryflameunitEntity::new).fireImmune().sized(0.6f, 1.8f));
    public static final RegistryObject<EntityType<EvilScientistEntity>> EVIL_SCIENTIST = register("evil_scientist", EntityType.Builder.of(EvilScientistEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(EvilScientistEntity::new).sized(0.6f, 1.8f));
    public static final RegistryObject<EntityType<EvilSniperEntity>> EVIL_SNIPER = register("evil_sniper", EntityType.Builder.of(EvilSniperEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(EvilSniperEntity::new).sized(0.6f, 1.8f));
    public static final RegistryObject<EntityType<EvilMilitaryEntity>> EVIL_MILITARY = register("evil_military", EntityType.Builder.of(EvilMilitaryEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(EvilMilitaryEntity::new).sized(0.6f, 1.8f));
    public static final RegistryObject<EntityType<TSCOutsiderEntity>> TSC_OUTSIDER = register("tsc_outsider", EntityType.Builder.of(TSCOutsiderEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(TSCOutsiderEntity::new).fireImmune().sized(0.6f, 1.8f));
    public static final RegistryObject<EntityType<TSCOutsiderGunnerEntity>> TSC_OUTSIDER_GUNNER = register("tsc_outsider_gunner", EntityType.Builder.of(TSCOutsiderGunnerEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(TSCOutsiderGunnerEntity::new).fireImmune().sized(0.6f, 1.8f));
    public static final RegistryObject<EntityType<TSCdroneEntity>> TS_CDRONE = register("ts_cdrone", EntityType.Builder.of(TSCdroneEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(TSCdroneEntity::new).fireImmune().sized(0.6f, 1.8f));
    public static final RegistryObject<EntityType<TSCHunterEntity>> TSC_HUNTER = register("tsc_hunter", EntityType.Builder.of(TSCHunterEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(TSCHunterEntity::new).fireImmune().sized(0.7f, 2.5f));
    public static final RegistryObject<EntityType<MilitaryRiotEntity>> MILITARY_RIOT = register("military_riot", EntityType.Builder.of(MilitaryRiotEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(MilitaryRiotEntity::new).sized(0.6f, 1.8f));
    public static final RegistryObject<EntityType<TSCBerserkEntity>> TSC_BERSERK = register("tsc_berserk", EntityType.Builder.of(TSCBerserkEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(TSCBerserkEntity::new).fireImmune().sized(0.7f, 2.1f));
    public static final RegistryObject<EntityType<DarkLatexCreeperEntity>> DARK_LATEX_CREEPER = register("dark_latex_creeper", EntityType.Builder.of(DarkLatexCreeperEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(DarkLatexCreeperEntity::new).sized(0.6f, 2.0f));
    public static final RegistryObject<EntityType<DarkLatexCreeperEnhancedEntity>> DARK_LATEX_CREEPER_ENHANCED = register("dark_latex_creeper_enhanced", EntityType.Builder.of(DarkLatexCreeperEnhancedEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(DarkLatexCreeperEnhancedEntity::new).sized(0.8f, 3.0f));
    public static final RegistryObject<EntityType<CivilianEntity>> CIVILIAN = register("civilian", EntityType.Builder.of(CivilianEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(CivilianEntity::new).sized(0.6f, 1.8f));
    public static final RegistryObject<EntityType<PrisionerEntity>> PRISIONER = register("prisioner", EntityType.Builder.of(PrisionerEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(PrisionerEntity::new).sized(0.6f, 1.8f));
    public static final RegistryObject<EntityType<PrisionermilitiaEntity>> PRISIONERMILITIA = register("prisionermilitia", EntityType.Builder.of(PrisionermilitiaEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(PrisionermilitiaEntity::new).sized(0.6f, 1.8f));
    public static final RegistryObject<EntityType<CivlianMilitiaEntity>> CIVLIAN_MILITIA = register("civlian_militia", EntityType.Builder.of(CivlianMilitiaEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(CivlianMilitiaEntity::new).sized(0.6f, 1.8f));
    public static final RegistryObject<EntityType<CrystalbowEntity>> CRYSTALBOW = register("projectile_crystalbow", EntityType.Builder.of(CrystalbowEntity::new, MobCategory.MISC).setCustomClientFactory(CrystalbowEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5f, 0.5f));
    public static final RegistryObject<EntityType<LatexcannonEntity>> LATEXCANNON = register("projectile_latexcannon", EntityType.Builder.of(LatexcannonEntity::new, MobCategory.MISC).setCustomClientFactory(LatexcannonEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5f, 0.5f));
    public static final RegistryObject<EntityType<RevolvingGooCannonEntity>> REVOLVING_GOO_CANNON = register("projectile_revolving_goo_cannon", EntityType.Builder.of(RevolvingGooCannonEntity::new, MobCategory.MISC).setCustomClientFactory(RevolvingGooCannonEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5f, 0.5f));
    public static final RegistryObject<EntityType<DartrifleEntity>> DARTRIFLE = register("projectile_dartrifle", EntityType.Builder.of(DartrifleEntity::new, MobCategory.MISC).setCustomClientFactory(DartrifleEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5f, 0.5f));
    public static final RegistryObject<EntityType<MatchlockPistolEntity>> MATCHLOCK_PISTOL = register("projectile_matchlock_pistol", EntityType.Builder.of(MatchlockPistolEntity::new, MobCategory.MISC).setCustomClientFactory(MatchlockPistolEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5f, 0.5f));
    public static final RegistryObject<EntityType<MatchLockMusketEntity>> MATCH_LOCK_MUSKET = register("projectile_match_lock_musket", EntityType.Builder.of(MatchLockMusketEntity::new, MobCategory.MISC).setCustomClientFactory(MatchLockMusketEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5f, 0.5f));
    public static final RegistryObject<EntityType<AR70AssaultRifleEntity>> AR_70_ASSAULT_RIFLE = register("projectile_ar_70_assault_rifle", EntityType.Builder.of(AR70AssaultRifleEntity::new, MobCategory.MISC).setCustomClientFactory(AR70AssaultRifleEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5f, 0.5f));
    public static final RegistryObject<EntityType<M4AssaultRifleEntity>> M_4_ASSAULT_RIFLE = register("projectile_m_4_assault_rifle", EntityType.Builder.of(M4AssaultRifleEntity::new, MobCategory.MISC).setCustomClientFactory(M4AssaultRifleEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5f, 0.5f));
    public static final RegistryObject<EntityType<ScrapM16RifleEntity>> SCRAP_M_16_RIFLE = register("projectile_scrap_m_16_rifle", EntityType.Builder.of(ScrapM16RifleEntity::new, MobCategory.MISC).setCustomClientFactory(ScrapM16RifleEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5f, 0.5f));
    public static final RegistryObject<EntityType<TSCPistolEntity>> TSC_PISTOL = register("projectile_tsc_pistol", EntityType.Builder.of(TSCPistolEntity::new, MobCategory.MISC).setCustomClientFactory(TSCPistolEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5f, 0.5f));
    public static final RegistryObject<EntityType<OverundershotgunEntity>> OVERUNDERSHOTGUN = register("projectile_overundershotgun", EntityType.Builder.of(OverundershotgunEntity::new, MobCategory.MISC).setCustomClientFactory(OverundershotgunEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5f, 0.5f));
    public static final RegistryObject<EntityType<FlamethowerEntity>> FLAMETHOWER = register("projectile_flamethower", EntityType.Builder.of(FlamethowerEntity::new, MobCategory.MISC).setCustomClientFactory(FlamethowerEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5f, 0.5f));
    public static final RegistryObject<EntityType<LatexDartRifleEntity>> LATEX_DART_RIFLE = register("projectile_latex_dart_rifle", EntityType.Builder.of(LatexDartRifleEntity::new, MobCategory.MISC).setCustomClientFactory(LatexDartRifleEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5f, 0.5f));
    public static final RegistryObject<EntityType<DarkLatexFoxScientistEntity>> DARK_LATEX_FOX_SCIENTIST = register("dark_latex_fox_scientist", EntityType.Builder.of(DarkLatexFoxScientistEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(DarkLatexFoxScientistEntity::new).sized(0.6f, 1.8f));
    public static final RegistryObject<EntityType<BeeHertxEntity>> BEE_HERTX = register("bee_hertx", EntityType.Builder.of(BeeHertxEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(BeeHertxEntity::new).sized(0.6f, 2.3f));
    public static final RegistryObject<EntityType<AHVHertxEntity>> AHV_HERTX = register("ahv_hertx", EntityType.Builder.of(AHVHertxEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(AHVHertxEntity::new).sized(0.7f, 2.0f));
    public static final RegistryObject<EntityType<TankCannonEntity>> TANK_CANNON = register("projectile_tank_cannon", EntityType.Builder.of(TankCannonEntity::new, MobCategory.MISC).setCustomClientFactory(TankCannonEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5f, 0.5f));
    public static final RegistryObject<EntityType<La4tankmorphrEntity>> LA_4TANKMORPHR = register("la_4tankmorphr", EntityType.Builder.of(La4tankmorphrEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(La4tankmorphrEntity::new).fireImmune().sized(1.1f, 4.2f));
    public static final RegistryObject<EntityType<La4tankmorphmEntity>> LA_4TANKMORPHM = register("la_4tankmorphm", EntityType.Builder.of(La4tankmorphmEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(La4tankmorphmEntity::new).fireImmune().sized(1.1f, 4.2f));
    public static final RegistryObject<EntityType<NXTHertxEntity>> NXT_HERTX = register("nxt_hertx", EntityType.Builder.of(NXTHertxEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(100).setUpdateInterval(3).setCustomClientFactory(NXTHertxEntity::new).sized(0.7f, 2.0f));
    public static final RegistryObject<EntityType<DROPPODEntity>> DROPPOD = register("droppod", EntityType.Builder.of(DROPPODEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(DROPPODEntity::new).fireImmune().sized(1.2f, 2.2f));
    public static final RegistryObject<EntityType<SneppleEntity>> SNEPPLE = register("projectile_snepple", EntityType.Builder.of(SneppleEntity::new, MobCategory.MISC).setCustomClientFactory(SneppleEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5f, 0.5f));
    public static final RegistryObject<EntityType<AllydroppodEntity>> ALLYDROPPOD = register("allydroppod", EntityType.Builder.of(AllydroppodEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(AllydroppodEntity::new).fireImmune().sized(1.2f, 2.2f));
    public static final RegistryObject<EntityType<LatexDropPodEntity>> LATEX_DROP_POD = register("latex_drop_pod", EntityType.Builder.of(LatexDropPodEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(LatexDropPodEntity::new).fireImmune().sized(1.2f, 2.2f));
    public static final RegistryObject<EntityType<HertxvarFEntity>> HERTXVAR_F = register("hertxvar_f", EntityType.Builder.of(HertxvarFEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(HertxvarFEntity::new).sized(0.7f, 2.0f));
    public static final RegistryObject<EntityType<HertxvarSolEntity>> HERTXVAR_SOL = register("hertxvar_sol", EntityType.Builder.of(HertxvarSolEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(HertxvarSolEntity::new).sized(0.7f, 2.0f));
    public static final RegistryObject<EntityType<HertxvarFBEntity>> HERTXVAR_FB = register("hertxvar_fb", EntityType.Builder.of(HertxvarFBEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(HertxvarFBEntity::new).sized(0.7f, 2.1f));
    public static final RegistryObject<EntityType<HertxSitEntity>> HERTX_SIT = register("hertx_sit", EntityType.Builder.of(HertxSitEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(32).setUpdateInterval(3).setCustomClientFactory(HertxSitEntity::new).sized(0.8f, 1.2f));
    public static final RegistryObject<EntityType<AshburyHertxEntity>> ASHBURY_HERTX = register("ashbury_hertx", EntityType.Builder.of(AshburyHertxEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(AshburyHertxEntity::new).sized(0.7f, 2.0f));
    public static final RegistryObject<EntityType<AshburySitEntity>> ASHBURY_SIT = register("ashbury_sit", EntityType.Builder.of(AshburySitEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(32).setUpdateInterval(3).setCustomClientFactory(AshburySitEntity::new).sized(0.8f, 1.2f));
    public static final RegistryObject<EntityType<BeeHertxSitEntity>> BEE_HERTX_SIT = register("bee_hertx_sit", EntityType.Builder.of(BeeHertxSitEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(32).setUpdateInterval(3).setCustomClientFactory(BeeHertxSitEntity::new).sized(0.8f, 1.2f));
    public static final RegistryObject<EntityType<AHVHertxSitEntity>> AHV_HERTX_SIT = register("ahv_hertx_sit", EntityType.Builder.of(AHVHertxSitEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(32).setUpdateInterval(3).setCustomClientFactory(AHVHertxSitEntity::new).sized(0.8f, 1.2f));
    public static final RegistryObject<EntityType<NXTSitEntity>> NXT_SIT = register("nxt_sit", EntityType.Builder.of(NXTSitEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(32).setUpdateInterval(3).setCustomClientFactory(NXTSitEntity::new).sized(0.8f, 1.2f));
    public static final RegistryObject<EntityType<HertxFSitEntity>> HERTX_F_SIT = register("hertx_f_sit", EntityType.Builder.of(HertxFSitEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(32).setUpdateInterval(3).setCustomClientFactory(HertxFSitEntity::new).sized(0.8f, 1.2f));
    public static final RegistryObject<EntityType<HertxFBSitEntity>> HERTX_FB_SIT = register("hertx_fb_sit", EntityType.Builder.of(HertxFBSitEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(32).setUpdateInterval(3).setCustomClientFactory(HertxFBSitEntity::new).sized(0.8f, 1.5f));
    public static final RegistryObject<EntityType<HertxSolWaitEntity>> HERTX_SOL_WAIT = register("hertx_sol_wait", EntityType.Builder.of(HertxSolWaitEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(HertxSolWaitEntity::new).sized(0.7f, 2.0f));
    public static final RegistryObject<EntityType<SlimelingTamedEntity>> SLIMELING_TAMED = register("slimeling_tamed", EntityType.Builder.of(SlimelingTamedEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(SlimelingTamedEntity::new).sized(0.6f, 2.0f));
    public static final RegistryObject<EntityType<SlimelingtamedsitEntity>> SLIMELINGTAMEDSIT = register("slimelingtamedsit", EntityType.Builder.of(SlimelingtamedsitEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(32).setUpdateInterval(3).setCustomClientFactory(SlimelingtamedsitEntity::new).sized(0.8f, 1.2f));
    public static final RegistryObject<EntityType<ProtectorSlimelingEntity>> PROTECTOR_SLIMELING = register("protector_slimeling", EntityType.Builder.of(ProtectorSlimelingEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(72).setUpdateInterval(3).setCustomClientFactory(ProtectorSlimelingEntity::new).sized(0.6f, 2.0f));
    public static final RegistryObject<EntityType<ProtectorSlimelingsitEntity>> PROTECTOR_SLIMELINGSIT = register("protector_slimelingsit", EntityType.Builder.of(ProtectorSlimelingsitEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(32).setUpdateInterval(3).setCustomClientFactory(ProtectorSlimelingsitEntity::new).sized(0.8f, 1.2f));
    public static final RegistryObject<EntityType<DarkLatexCakeEntity>> DARK_LATEX_CAKE = register("dark_latex_cake", EntityType.Builder.of(DarkLatexCakeEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(72).setUpdateInterval(3).setCustomClientFactory(DarkLatexCakeEntity::new).sized(0.6f, 1.8f));
    public static final RegistryObject<EntityType<DroneHertxWaitEntity>> DRONE_HERTX_WAIT = register("drone_hertx_wait", EntityType.Builder.of(DroneHertxWaitEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(DroneHertxWaitEntity::new).fireImmune().sized(0.7f, 1.2f));
    public static final RegistryObject<EntityType<ArmedDroneHertxWaitEntity>> ARMED_DRONE_HERTX_WAIT = register("armed_drone_hertx_wait", EntityType.Builder.of(ArmedDroneHertxWaitEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(ArmedDroneHertxWaitEntity::new).fireImmune().sized(0.7f, 2.0f));
    public static final RegistryObject<EntityType<ExplosivegooEntity>> EXPLOSIVEGOO = register("projectile_explosivegoo", EntityType.Builder.of(ExplosivegooEntity::new, MobCategory.MISC).setCustomClientFactory(ExplosivegooEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5f, 0.5f));
    public static final RegistryObject<EntityType<CivilianMilitiaMeleeEntity>> CIVILIAN_MILITIA_MELEE = register("civilian_militia_melee", EntityType.Builder.of(CivilianMilitiaMeleeEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(CivilianMilitiaMeleeEntity::new).sized(0.6f, 1.8f));
    public static final RegistryObject<EntityType<PrisionerMilitiaMeleeEntity>> PRISIONER_MILITIA_MELEE = register("prisioner_militia_melee", EntityType.Builder.of(PrisionerMilitiaMeleeEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(PrisionerMilitiaMeleeEntity::new).sized(0.6f, 1.8f));

    private static <T extends Entity> RegistryObject<EntityType<T>> register(String registryname, EntityType.Builder<T> entityTypeBuilder) {
        return REGISTRY.register(registryname, () -> entityTypeBuilder.build(registryname));
    }

    @SubscribeEvent
    public static void init(FMLCommonSetupEvent event) {
        event.enqueueWork(() -> {
            SlimelingEntity.init();
            DarklatexslugEntity.init();
            DarklatexEntity.init();
            DarkLatexCentaurEntity.init();
            DarkLatexSkeletonEntity.init();
            NoiseStalkerEntity.init();
            DlsharkEntity.init();
            DarkLatexMothEntity.init();
            DarkLatexSnepEntity.init();
            DarkLatexFoxEntity.init();
            DarkLatexFoxSniperEntity.init();
            DarkLatexSnakeEntity.init();
            DarkLatexSpiderEntity.init();
            DlSquidDogEntity.init();
            DLbeeEntity.init();
            DarkLatexQueenBeeEntity.init();
            DarkLatexSpiderQueenEntity.init();
            DarklatexconeEntity.init();
            HertxEntity.init();
            DroneHertxEntity.init();
            ArmedDroneHertxEntity.init();
            ScientistEntity.init();
            MilitaryEntity.init();
            MilitaryflameunitEntity.init();
            EvilScientistEntity.init();
            EvilSniperEntity.init();
            EvilMilitaryEntity.init();
            TSCOutsiderEntity.init();
            TSCOutsiderGunnerEntity.init();
            TSCdroneEntity.init();
            TSCHunterEntity.init();
            MilitaryRiotEntity.init();
            TSCBerserkEntity.init();
            DarkLatexCreeperEntity.init();
            DarkLatexCreeperEnhancedEntity.init();
            CivilianEntity.init();
            PrisionerEntity.init();
            PrisionermilitiaEntity.init();
            CivlianMilitiaEntity.init();
            DarkLatexFoxScientistEntity.init();
            BeeHertxEntity.init();
            AHVHertxEntity.init();
            La4tankmorphrEntity.init();
            La4tankmorphmEntity.init();
            NXTHertxEntity.init();
            DROPPODEntity.init();
            AllydroppodEntity.init();
            LatexDropPodEntity.init();
            HertxvarFEntity.init();
            HertxvarSolEntity.init();
            HertxvarFBEntity.init();
            HertxSitEntity.init();
            AshburyHertxEntity.init();
            AshburySitEntity.init();
            BeeHertxSitEntity.init();
            AHVHertxSitEntity.init();
            NXTSitEntity.init();
            HertxFSitEntity.init();
            HertxFBSitEntity.init();
            HertxSolWaitEntity.init();
            SlimelingTamedEntity.init();
            SlimelingtamedsitEntity.init();
            ProtectorSlimelingEntity.init();
            ProtectorSlimelingsitEntity.init();
            DarkLatexCakeEntity.init();
            DroneHertxWaitEntity.init();
            ArmedDroneHertxWaitEntity.init();
            CivilianMilitiaMeleeEntity.init();
            PrisionerMilitiaMeleeEntity.init();
        });
    }

    @SubscribeEvent
    public static void registerAttributes(EntityAttributeCreationEvent event) {
        event.put(SLIMELING.get(), SlimelingEntity.createAttributes().build());
        event.put(DARKLATEXSLUG.get(), DarklatexslugEntity.createAttributes().build());
        event.put(DARKLATEX.get(), DarklatexEntity.createMonsterAttributes().build());
        event.put(DARK_LATEX_CENTAUR.get(), DarkLatexCentaurEntity.createAttributes().build());
        event.put(DARK_LATEX_SKELETON.get(), DarkLatexSkeletonEntity.createMonsterAttributes().build());
        event.put(NOISE_STALKER.get(), NoiseStalkerEntity.createAttributes().build());
        event.put(DLSHARK.get(), LatexEntity.createMonsterAttributes().build());
        event.put(DARK_LATEX_MOTH.get(), DarkLatexMothEntity.createAttributes().build());
        event.put(DARK_LATEX_SNEP.get(), DarkLatexSnepEntity.createMonsterAttributes().build());
        event.put(DARK_LATEX_FOX.get(), DarkLatexFoxEntity.createMonsterAttributes().build());
        event.put(DARK_LATEX_FOX_SNIPER.get(), DarkLatexFoxSniperEntity.createAttributes().build());
        event.put(DARK_LATEX_SNAKE.get(), DarkLatexSnakeEntity.createAttributes().build());
        event.put(DARK_LATEX_SPIDER.get(), DarkLatexSpiderEntity.createAttributes().build());
        event.put(DL_SQUID_DOG.get(), DlSquidDogEntity.createAttributes().build());
        event.put(D_LBEE.get(), DLbeeEntity.createAttributes().build());
        event.put(DARK_LATEX_QUEEN_BEE.get(), DarkLatexQueenBeeEntity.createAttributes().build());
        event.put(DARK_LATEX_SPIDER_QUEEN.get(), DarkLatexSpiderQueenEntity.createAttributes().build());
        event.put(DARKLATEXCONE.get(), DarklatexconeEntity.createMonsterAttributes().build());
        event.put(HERTX.get(), HertxEntity.createAttributes().build());
        event.put(DRONE_HERTX.get(), DroneHertxEntity.createAttributes().build());
        event.put(ARMED_DRONE_HERTX.get(), ArmedDroneHertxEntity.createAttributes().build());
        event.put(SCIENTIST.get(), ScientistEntity.createAttributes().build());
        event.put(MILITARY.get(), MilitaryEntity.createAttributes().build());
        event.put(MILITARYFLAMEUNIT.get(), MilitaryflameunitEntity.createAttributes().build());
        event.put(EVIL_SCIENTIST.get(), EvilScientistEntity.createAttributes().build());
        event.put(EVIL_SNIPER.get(), EvilSniperEntity.createAttributes().build());
        event.put(EVIL_MILITARY.get(), EvilMilitaryEntity.createAttributes().build());
        event.put(TSC_OUTSIDER.get(), TSCOutsiderEntity.createAttributes().build());
        event.put(TSC_OUTSIDER_GUNNER.get(), TSCOutsiderGunnerEntity.createAttributes().build());
        event.put(TS_CDRONE.get(), TSCdroneEntity.createAttributes().build());
        event.put(TSC_HUNTER.get(), TSCHunterEntity.createAttributes().build());
        event.put(MILITARY_RIOT.get(), MilitaryRiotEntity.createAttributes().build());
        event.put(TSC_BERSERK.get(), TSCBerserkEntity.createAttributes().build());
        event.put(DARK_LATEX_CREEPER.get(), DarkLatexCreeperEntity.createAttributes().build());
        event.put(DARK_LATEX_CREEPER_ENHANCED.get(), DarkLatexCreeperEnhancedEntity.createAttributes().build());
        event.put(CIVILIAN.get(), CivilianEntity.createAttributes().build());
        event.put(PRISIONER.get(), PrisionerEntity.createAttributes().build());
        event.put(PRISIONERMILITIA.get(), PrisionermilitiaEntity.createAttributes().build());
        event.put(CIVLIAN_MILITIA.get(), CivlianMilitiaEntity.createAttributes().build());
        event.put(DARK_LATEX_FOX_SCIENTIST.get(), DarkLatexFoxScientistEntity.createAttributes().build());
        event.put(BEE_HERTX.get(), BeeHertxEntity.createAttributes().build());
        event.put(AHV_HERTX.get(), AHVHertxEntity.createAttributes().build());
        event.put(LA_4TANKMORPHR.get(), La4tankmorphrEntity.createAttributes().build());
        event.put(LA_4TANKMORPHM.get(), La4tankmorphmEntity.createAttributes().build());
        event.put(NXT_HERTX.get(), NXTHertxEntity.createAttributes().build());
        event.put(DROPPOD.get(), DROPPODEntity.createAttributes().build());
        event.put(ALLYDROPPOD.get(), AllydroppodEntity.createAttributes().build());
        event.put(LATEX_DROP_POD.get(), LatexDropPodEntity.createAttributes().build());
        event.put(HERTXVAR_F.get(), HertxvarFEntity.createAttributes().build());
        event.put(HERTXVAR_SOL.get(), HertxvarSolEntity.createAttributes().build());
        event.put(HERTXVAR_FB.get(), HertxvarFBEntity.createAttributes().build());
        event.put(HERTX_SIT.get(), HertxSitEntity.createAttributes().build());
        event.put(ASHBURY_HERTX.get(), AshburyHertxEntity.createAttributes().build());
        event.put(ASHBURY_SIT.get(), AshburySitEntity.createAttributes().build());
        event.put(BEE_HERTX_SIT.get(), BeeHertxSitEntity.createAttributes().build());
        event.put(AHV_HERTX_SIT.get(), AHVHertxSitEntity.createAttributes().build());
        event.put(NXT_SIT.get(), NXTSitEntity.createAttributes().build());
        event.put(HERTX_F_SIT.get(), HertxFSitEntity.createAttributes().build());
        event.put(HERTX_FB_SIT.get(), HertxFBSitEntity.createAttributes().build());
        event.put(HERTX_SOL_WAIT.get(), HertxSolWaitEntity.createAttributes().build());
        event.put(SLIMELING_TAMED.get(), SlimelingTamedEntity.createAttributes().build());
        event.put(SLIMELINGTAMEDSIT.get(), SlimelingtamedsitEntity.createAttributes().build());
        event.put(PROTECTOR_SLIMELING.get(), ProtectorSlimelingEntity.createAttributes().build());
        event.put(PROTECTOR_SLIMELINGSIT.get(), ProtectorSlimelingsitEntity.createAttributes().build());
        event.put(DARK_LATEX_CAKE.get(), DarkLatexCakeEntity.createMonsterAttributes().build());
        event.put(DRONE_HERTX_WAIT.get(), DroneHertxWaitEntity.createAttributes().build());
        event.put(ARMED_DRONE_HERTX_WAIT.get(), ArmedDroneHertxWaitEntity.createAttributes().build());
        event.put(CIVILIAN_MILITIA_MELEE.get(), CivilianMilitiaMeleeEntity.createAttributes().build());
        event.put(PRISIONER_MILITIA_MELEE.get(), PrisionerMilitiaMeleeEntity.createAttributes().build());
    }
}
