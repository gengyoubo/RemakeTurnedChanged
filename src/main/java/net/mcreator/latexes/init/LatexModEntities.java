//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package net.mcreator.latexes.init;

import net.mcreator.latexes.entity.AHVHertxEntity;
import net.mcreator.latexes.entity.AHVHertxSitEntity;
import net.mcreator.latexes.entity.AR70AssaultRifleEntity;
import net.mcreator.latexes.entity.AllydroppodEntity;
import net.mcreator.latexes.entity.ArmedDroneHertxEntity;
import net.mcreator.latexes.entity.ArmedDroneHertxWaitEntity;
import net.mcreator.latexes.entity.AshburyHertxEntity;
import net.mcreator.latexes.entity.AshburySitEntity;
import net.mcreator.latexes.entity.BeeHertxEntity;
import net.mcreator.latexes.entity.BeeHertxSitEntity;
import net.mcreator.latexes.entity.CivilianEntity;
import net.mcreator.latexes.entity.CivilianMilitiaMeleeEntity;
import net.mcreator.latexes.entity.CivlianMilitiaEntity;
import net.mcreator.latexes.entity.CrystalbowEntity;
import net.mcreator.latexes.entity.DLbeeEntity;
import net.mcreator.latexes.entity.DROPPODEntity;
import net.mcreator.latexes.entity.DarkLatexCakeEntity;
import net.mcreator.latexes.entity.DarkLatexCentaurEntity;
import net.mcreator.latexes.entity.DarkLatexCreeperEnhancedEntity;
import net.mcreator.latexes.entity.DarkLatexCreeperEntity;
import net.mcreator.latexes.entity.DarkLatexDragonEntity;
import net.mcreator.latexes.entity.DarkLatexFoxEntity;
import net.mcreator.latexes.entity.DarkLatexFoxScientistEntity;
import net.mcreator.latexes.entity.DarkLatexFoxSniperEntity;
import net.mcreator.latexes.entity.DarkLatexMothEntity;
import net.mcreator.latexes.entity.DarkLatexQueenBeeEntity;
import net.mcreator.latexes.entity.DarkLatexSkeletonEntity;
import net.mcreator.latexes.entity.DarkLatexSnakeEntity;
import net.mcreator.latexes.entity.DarkLatexSnepEntity;
import net.mcreator.latexes.entity.DarkLatexSpiderEntity;
import net.mcreator.latexes.entity.DarkLatexSpiderQueenEntity;
import net.mcreator.latexes.entity.DarklatexEntity;
import net.mcreator.latexes.entity.DarklatexconeEntity;
import net.mcreator.latexes.entity.DarklatexslugEntity;
import net.mcreator.latexes.entity.DartrifleEntity;
import net.mcreator.latexes.entity.DlSquidDogEntity;
import net.mcreator.latexes.entity.DlsharkEntity;
import net.mcreator.latexes.entity.DroneHertxEntity;
import net.mcreator.latexes.entity.DroneHertxWaitEntity;
import net.mcreator.latexes.entity.EvilMilitaryEntity;
import net.mcreator.latexes.entity.EvilScientistEntity;
import net.mcreator.latexes.entity.EvilSniperEntity;
import net.mcreator.latexes.entity.ExplosivegooEntity;
import net.mcreator.latexes.entity.FlamethowerEntity;
import net.mcreator.latexes.entity.HertxEntity;
import net.mcreator.latexes.entity.HertxFBSitEntity;
import net.mcreator.latexes.entity.HertxFSitEntity;
import net.mcreator.latexes.entity.HertxSitEntity;
import net.mcreator.latexes.entity.HertxSolWaitEntity;
import net.mcreator.latexes.entity.HertxvarFBEntity;
import net.mcreator.latexes.entity.HertxvarFEntity;
import net.mcreator.latexes.entity.HertxvarSolEntity;
import net.mcreator.latexes.entity.La4tankmorphmEntity;
import net.mcreator.latexes.entity.La4tankmorphrEntity;
import net.mcreator.latexes.entity.LatexDartRifleEntity;
import net.mcreator.latexes.entity.LatexDropPodEntity;
import net.mcreator.latexes.entity.LatexcannonEntity;
import net.mcreator.latexes.entity.M4AssaultRifleEntity;
import net.mcreator.latexes.entity.MatchLockMusketEntity;
import net.mcreator.latexes.entity.MatchlockPistolEntity;
import net.mcreator.latexes.entity.MilitaryEntity;
import net.mcreator.latexes.entity.MilitaryRiotEntity;
import net.mcreator.latexes.entity.MilitaryflameunitEntity;
import net.mcreator.latexes.entity.NXTHertxEntity;
import net.mcreator.latexes.entity.NXTSitEntity;
import net.mcreator.latexes.entity.NoiseStalkerEntity;
import net.mcreator.latexes.entity.OverundershotgunEntity;
import net.mcreator.latexes.entity.PrisionerEntity;
import net.mcreator.latexes.entity.PrisionerMilitiaMeleeEntity;
import net.mcreator.latexes.entity.PrisionermilitiaEntity;
import net.mcreator.latexes.entity.ProtectorSlimelingEntity;
import net.mcreator.latexes.entity.ProtectorSlimelingsitEntity;
import net.mcreator.latexes.entity.RevolvingGooCannonEntity;
import net.mcreator.latexes.entity.ScientistEntity;
import net.mcreator.latexes.entity.ScrapM16RifleEntity;
import net.mcreator.latexes.entity.SlimelingEntity;
import net.mcreator.latexes.entity.SlimelingTamedEntity;
import net.mcreator.latexes.entity.SlimelingtamedsitEntity;
import net.mcreator.latexes.entity.SneppleEntity;
import net.mcreator.latexes.entity.TSCBerserkEntity;
import net.mcreator.latexes.entity.TSCHunterEntity;
import net.mcreator.latexes.entity.TSCOutsiderEntity;
import net.mcreator.latexes.entity.TSCOutsiderGunnerEntity;
import net.mcreator.latexes.entity.TSCPistolEntity;
import net.mcreator.latexes.entity.TSCdroneEntity;
import net.mcreator.latexes.entity.TankCannonEntity;
import net.mcreator.latexes.entity.YufengEntity;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.MobCategory;
import net.minecraft.world.entity.EntityType.Builder;
import net.minecraftforge.event.entity.EntityAttributeCreationEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod.EventBusSubscriber;
import net.minecraftforge.fml.common.Mod.EventBusSubscriber.Bus;
import net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.RegistryObject;

@EventBusSubscriber(
        bus = Bus.MOD
)
public class LatexModEntities {
    public static final DeferredRegister<EntityType<?>> REGISTRY;
    public static final RegistryObject<EntityType<SlimelingEntity>> SLIMELING;
    public static final RegistryObject<EntityType<DarklatexslugEntity>> DARKLATEXSLUG;
    public static final RegistryObject<EntityType<DarklatexEntity>> DARKLATEX;
    public static final RegistryObject<EntityType<DarkLatexCentaurEntity>> DARK_LATEX_CENTAUR;
    public static final RegistryObject<EntityType<DarkLatexSkeletonEntity>> DARK_LATEX_SKELETON;
    public static final RegistryObject<EntityType<YufengEntity>> YUFENG;
    public static final RegistryObject<EntityType<NoiseStalkerEntity>> NOISE_STALKER;
    public static final RegistryObject<EntityType<DlsharkEntity>> DLSHARK;
    public static final RegistryObject<EntityType<DarkLatexMothEntity>> DARK_LATEX_MOTH;
    public static final RegistryObject<EntityType<DarkLatexSnepEntity>> DARK_LATEX_SNEP;
    public static final RegistryObject<EntityType<DarkLatexFoxEntity>> DARK_LATEX_FOX;
    public static final RegistryObject<EntityType<DarkLatexFoxSniperEntity>> DARK_LATEX_FOX_SNIPER;
    public static final RegistryObject<EntityType<DarkLatexSnakeEntity>> DARK_LATEX_SNAKE;
    public static final RegistryObject<EntityType<DarkLatexDragonEntity>> DARK_LATEX_DRAGON;
    public static final RegistryObject<EntityType<DarkLatexSpiderEntity>> DARK_LATEX_SPIDER;
    public static final RegistryObject<EntityType<DlSquidDogEntity>> DL_SQUID_DOG;
    public static final RegistryObject<EntityType<DLbeeEntity>> D_LBEE;
    public static final RegistryObject<EntityType<DarkLatexQueenBeeEntity>> DARK_LATEX_QUEEN_BEE;
    public static final RegistryObject<EntityType<DarkLatexSpiderQueenEntity>> DARK_LATEX_SPIDER_QUEEN;
    public static final RegistryObject<EntityType<DarklatexconeEntity>> DARKLATEXCONE;
    public static final RegistryObject<EntityType<HertxEntity>> HERTX;
    public static final RegistryObject<EntityType<DroneHertxEntity>> DRONE_HERTX;
    public static final RegistryObject<EntityType<ArmedDroneHertxEntity>> ARMED_DRONE_HERTX;
    public static final RegistryObject<EntityType<ScientistEntity>> SCIENTIST;
    public static final RegistryObject<EntityType<MilitaryEntity>> MILITARY;
    public static final RegistryObject<EntityType<MilitaryflameunitEntity>> MILITARYFLAMEUNIT;
    public static final RegistryObject<EntityType<EvilScientistEntity>> EVIL_SCIENTIST;
    public static final RegistryObject<EntityType<EvilSniperEntity>> EVIL_SNIPER;
    public static final RegistryObject<EntityType<EvilMilitaryEntity>> EVIL_MILITARY;
    public static final RegistryObject<EntityType<TSCOutsiderEntity>> TSC_OUTSIDER;
    public static final RegistryObject<EntityType<TSCOutsiderGunnerEntity>> TSC_OUTSIDER_GUNNER;
    public static final RegistryObject<EntityType<TSCdroneEntity>> TS_CDRONE;
    public static final RegistryObject<EntityType<TSCHunterEntity>> TSC_HUNTER;
    public static final RegistryObject<EntityType<MilitaryRiotEntity>> MILITARY_RIOT;
    public static final RegistryObject<EntityType<TSCBerserkEntity>> TSC_BERSERK;
    public static final RegistryObject<EntityType<DarkLatexCreeperEntity>> DARK_LATEX_CREEPER;
    public static final RegistryObject<EntityType<DarkLatexCreeperEnhancedEntity>> DARK_LATEX_CREEPER_ENHANCED;
    public static final RegistryObject<EntityType<CivilianEntity>> CIVILIAN;
    public static final RegistryObject<EntityType<PrisionerEntity>> PRISIONER;
    public static final RegistryObject<EntityType<PrisionermilitiaEntity>> PRISIONERMILITIA;
    public static final RegistryObject<EntityType<CivlianMilitiaEntity>> CIVLIAN_MILITIA;
    public static final RegistryObject<EntityType<CrystalbowEntity>> CRYSTALBOW;
    public static final RegistryObject<EntityType<LatexcannonEntity>> LATEXCANNON;
    public static final RegistryObject<EntityType<RevolvingGooCannonEntity>> REVOLVING_GOO_CANNON;
    public static final RegistryObject<EntityType<DartrifleEntity>> DARTRIFLE;
    public static final RegistryObject<EntityType<MatchlockPistolEntity>> MATCHLOCK_PISTOL;
    public static final RegistryObject<EntityType<MatchLockMusketEntity>> MATCH_LOCK_MUSKET;
    public static final RegistryObject<EntityType<AR70AssaultRifleEntity>> AR_70_ASSAULT_RIFLE;
    public static final RegistryObject<EntityType<M4AssaultRifleEntity>> M_4_ASSAULT_RIFLE;
    public static final RegistryObject<EntityType<ScrapM16RifleEntity>> SCRAP_M_16_RIFLE;
    public static final RegistryObject<EntityType<TSCPistolEntity>> TSC_PISTOL;
    public static final RegistryObject<EntityType<OverundershotgunEntity>> OVERUNDERSHOTGUN;
    public static final RegistryObject<EntityType<FlamethowerEntity>> FLAMETHOWER;
    public static final RegistryObject<EntityType<LatexDartRifleEntity>> LATEX_DART_RIFLE;
    public static final RegistryObject<EntityType<DarkLatexFoxScientistEntity>> DARK_LATEX_FOX_SCIENTIST;
    public static final RegistryObject<EntityType<BeeHertxEntity>> BEE_HERTX;
    public static final RegistryObject<EntityType<AHVHertxEntity>> AHV_HERTX;
    public static final RegistryObject<EntityType<TankCannonEntity>> TANK_CANNON;
    public static final RegistryObject<EntityType<La4tankmorphrEntity>> LA_4TANKMORPHR;
    public static final RegistryObject<EntityType<La4tankmorphmEntity>> LA_4TANKMORPHM;
    public static final RegistryObject<EntityType<NXTHertxEntity>> NXT_HERTX;
    public static final RegistryObject<EntityType<DROPPODEntity>> DROPPOD;
    public static final RegistryObject<EntityType<SneppleEntity>> SNEPPLE;
    public static final RegistryObject<EntityType<AllydroppodEntity>> ALLYDROPPOD;
    public static final RegistryObject<EntityType<LatexDropPodEntity>> LATEX_DROP_POD;
    public static final RegistryObject<EntityType<HertxvarFEntity>> HERTXVAR_F;
    public static final RegistryObject<EntityType<HertxvarSolEntity>> HERTXVAR_SOL;
    public static final RegistryObject<EntityType<HertxvarFBEntity>> HERTXVAR_FB;
    public static final RegistryObject<EntityType<HertxSitEntity>> HERTX_SIT;
    public static final RegistryObject<EntityType<AshburyHertxEntity>> ASHBURY_HERTX;
    public static final RegistryObject<EntityType<AshburySitEntity>> ASHBURY_SIT;
    public static final RegistryObject<EntityType<BeeHertxSitEntity>> BEE_HERTX_SIT;
    public static final RegistryObject<EntityType<AHVHertxSitEntity>> AHV_HERTX_SIT;
    public static final RegistryObject<EntityType<NXTSitEntity>> NXT_SIT;
    public static final RegistryObject<EntityType<HertxFSitEntity>> HERTX_F_SIT;
    public static final RegistryObject<EntityType<HertxFBSitEntity>> HERTX_FB_SIT;
    public static final RegistryObject<EntityType<HertxSolWaitEntity>> HERTX_SOL_WAIT;
    public static final RegistryObject<EntityType<SlimelingTamedEntity>> SLIMELING_TAMED;
    public static final RegistryObject<EntityType<SlimelingtamedsitEntity>> SLIMELINGTAMEDSIT;
    public static final RegistryObject<EntityType<ProtectorSlimelingEntity>> PROTECTOR_SLIMELING;
    public static final RegistryObject<EntityType<ProtectorSlimelingsitEntity>> PROTECTOR_SLIMELINGSIT;
    public static final RegistryObject<EntityType<DarkLatexCakeEntity>> DARK_LATEX_CAKE;
    public static final RegistryObject<EntityType<DroneHertxWaitEntity>> DRONE_HERTX_WAIT;
    public static final RegistryObject<EntityType<ArmedDroneHertxWaitEntity>> ARMED_DRONE_HERTX_WAIT;
    public static final RegistryObject<EntityType<ExplosivegooEntity>> EXPLOSIVEGOO;
    public static final RegistryObject<EntityType<CivilianMilitiaMeleeEntity>> CIVILIAN_MILITIA_MELEE;
    public static final RegistryObject<EntityType<PrisionerMilitiaMeleeEntity>> PRISIONER_MILITIA_MELEE;

    public LatexModEntities() {
    }

    private static <T extends Entity> RegistryObject<EntityType<T>> register(String registryname, EntityType.Builder<T> entityTypeBuilder) {
        return REGISTRY.register(registryname, () -> {
            return entityTypeBuilder.build(registryname);
        });
    }

    @SubscribeEvent
    public static void init(FMLCommonSetupEvent event) {
        event.enqueueWork(() -> {
            SlimelingEntity.init();
            DarklatexslugEntity.init();
            DarklatexEntity.init();
            DarkLatexCentaurEntity.init();
            DarkLatexSkeletonEntity.init();
            YufengEntity.init();
            NoiseStalkerEntity.init();
            DlsharkEntity.init();
            DarkLatexMothEntity.init();
            DarkLatexSnepEntity.init();
            DarkLatexFoxEntity.init();
            DarkLatexFoxSniperEntity.init();
            DarkLatexSnakeEntity.init();
            DarkLatexDragonEntity.init();
            DarkLatexSpiderEntity.init();
            DlSquidDogEntity.init();
            DLbeeEntity.init();
            DarkLatexQueenBeeEntity.init();
            DarkLatexSpiderQueenEntity.init();
            DarklatexconeEntity.init();
            HertxEntity.init();
            DroneHertxEntity.init();
            ArmedDroneHertxEntity.init();
            ScientistEntity.init();
            MilitaryEntity.init();
            MilitaryflameunitEntity.init();
            EvilScientistEntity.init();
            EvilSniperEntity.init();
            EvilMilitaryEntity.init();
            TSCOutsiderEntity.init();
            TSCOutsiderGunnerEntity.init();
            TSCdroneEntity.init();
            TSCHunterEntity.init();
            MilitaryRiotEntity.init();
            TSCBerserkEntity.init();
            DarkLatexCreeperEntity.init();
            DarkLatexCreeperEnhancedEntity.init();
            CivilianEntity.init();
            PrisionerEntity.init();
            PrisionermilitiaEntity.init();
            CivlianMilitiaEntity.init();
            DarkLatexFoxScientistEntity.init();
            BeeHertxEntity.init();
            AHVHertxEntity.init();
            La4tankmorphrEntity.init();
            La4tankmorphmEntity.init();
            NXTHertxEntity.init();
            DROPPODEntity.init();
            AllydroppodEntity.init();
            LatexDropPodEntity.init();
            HertxvarFEntity.init();
            HertxvarSolEntity.init();
            HertxvarFBEntity.init();
            HertxSitEntity.init();
            AshburyHertxEntity.init();
            AshburySitEntity.init();
            BeeHertxSitEntity.init();
            AHVHertxSitEntity.init();
            NXTSitEntity.init();
            HertxFSitEntity.init();
            HertxFBSitEntity.init();
            HertxSolWaitEntity.init();
            SlimelingTamedEntity.init();
            SlimelingtamedsitEntity.init();
            ProtectorSlimelingEntity.init();
            ProtectorSlimelingsitEntity.init();
            DarkLatexCakeEntity.init();
            DroneHertxWaitEntity.init();
            ArmedDroneHertxWaitEntity.init();
            CivilianMilitiaMeleeEntity.init();
            PrisionerMilitiaMeleeEntity.init();
        });
    }

    @SubscribeEvent
    public static void registerAttributes(EntityAttributeCreationEvent event) {
        event.put((EntityType)SLIMELING.get(), SlimelingEntity.createAttributes().build());
        event.put((EntityType)DARKLATEXSLUG.get(), DarklatexslugEntity.createAttributes().build());
        event.put((EntityType)DARKLATEX.get(), DarklatexEntity.createAttributes().build());
        event.put((EntityType)DARK_LATEX_CENTAUR.get(), DarkLatexCentaurEntity.createAttributes().build());
        event.put((EntityType)DARK_LATEX_SKELETON.get(), DarkLatexSkeletonEntity.createAttributes().build());
        event.put((EntityType)YUFENG.get(), YufengEntity.createAttributes().build());
        event.put((EntityType)NOISE_STALKER.get(), NoiseStalkerEntity.createAttributes().build());
        event.put((EntityType)DLSHARK.get(), DlsharkEntity.createAttributes().build());
        event.put((EntityType)DARK_LATEX_MOTH.get(), DarkLatexMothEntity.createAttributes().build());
        event.put((EntityType)DARK_LATEX_SNEP.get(), DarkLatexSnepEntity.createAttributes().build());
        event.put((EntityType)DARK_LATEX_FOX.get(), DarkLatexFoxEntity.createAttributes().build());
        event.put((EntityType)DARK_LATEX_FOX_SNIPER.get(), DarkLatexFoxSniperEntity.createAttributes().build());
        event.put((EntityType)DARK_LATEX_SNAKE.get(), DarkLatexSnakeEntity.createAttributes().build());
        event.put((EntityType)DARK_LATEX_DRAGON.get(), DarkLatexDragonEntity.createAttributes().build());
        event.put((EntityType)DARK_LATEX_SPIDER.get(), DarkLatexSpiderEntity.createAttributes().build());
        event.put((EntityType)DL_SQUID_DOG.get(), DlSquidDogEntity.createAttributes().build());
        event.put((EntityType)D_LBEE.get(), DLbeeEntity.createAttributes().build());
        event.put((EntityType)DARK_LATEX_QUEEN_BEE.get(), DarkLatexQueenBeeEntity.createAttributes().build());
        event.put((EntityType)DARK_LATEX_SPIDER_QUEEN.get(), DarkLatexSpiderQueenEntity.createAttributes().build());
        event.put((EntityType)DARKLATEXCONE.get(), DarklatexconeEntity.createAttributes().build());
        event.put((EntityType)HERTX.get(), HertxEntity.createAttributes().build());
        event.put((EntityType)DRONE_HERTX.get(), DroneHertxEntity.createAttributes().build());
        event.put((EntityType)ARMED_DRONE_HERTX.get(), ArmedDroneHertxEntity.createAttributes().build());
        event.put((EntityType)SCIENTIST.get(), ScientistEntity.createAttributes().build());
        event.put((EntityType)MILITARY.get(), MilitaryEntity.createAttributes().build());
        event.put((EntityType)MILITARYFLAMEUNIT.get(), MilitaryflameunitEntity.createAttributes().build());
        event.put((EntityType)EVIL_SCIENTIST.get(), EvilScientistEntity.createAttributes().build());
        event.put((EntityType)EVIL_SNIPER.get(), EvilSniperEntity.createAttributes().build());
        event.put((EntityType)EVIL_MILITARY.get(), EvilMilitaryEntity.createAttributes().build());
        event.put((EntityType)TSC_OUTSIDER.get(), TSCOutsiderEntity.createAttributes().build());
        event.put((EntityType)TSC_OUTSIDER_GUNNER.get(), TSCOutsiderGunnerEntity.createAttributes().build());
        event.put((EntityType)TS_CDRONE.get(), TSCdroneEntity.createAttributes().build());
        event.put((EntityType)TSC_HUNTER.get(), TSCHunterEntity.createAttributes().build());
        event.put((EntityType)MILITARY_RIOT.get(), MilitaryRiotEntity.createAttributes().build());
        event.put((EntityType)TSC_BERSERK.get(), TSCBerserkEntity.createAttributes().build());
        event.put((EntityType)DARK_LATEX_CREEPER.get(), DarkLatexCreeperEntity.createAttributes().build());
        event.put((EntityType)DARK_LATEX_CREEPER_ENHANCED.get(), DarkLatexCreeperEnhancedEntity.createAttributes().build());
        event.put((EntityType)CIVILIAN.get(), CivilianEntity.createAttributes().build());
        event.put((EntityType)PRISIONER.get(), PrisionerEntity.createAttributes().build());
        event.put((EntityType)PRISIONERMILITIA.get(), PrisionermilitiaEntity.createAttributes().build());
        event.put((EntityType)CIVLIAN_MILITIA.get(), CivlianMilitiaEntity.createAttributes().build());
        event.put((EntityType)DARK_LATEX_FOX_SCIENTIST.get(), DarkLatexFoxScientistEntity.createAttributes().build());
        event.put((EntityType)BEE_HERTX.get(), BeeHertxEntity.createAttributes().build());
        event.put((EntityType)AHV_HERTX.get(), AHVHertxEntity.createAttributes().build());
        event.put((EntityType)LA_4TANKMORPHR.get(), La4tankmorphrEntity.createAttributes().build());
        event.put((EntityType)LA_4TANKMORPHM.get(), La4tankmorphmEntity.createAttributes().build());
        event.put((EntityType)NXT_HERTX.get(), NXTHertxEntity.createAttributes().build());
        event.put((EntityType)DROPPOD.get(), DROPPODEntity.createAttributes().build());
        event.put((EntityType)ALLYDROPPOD.get(), AllydroppodEntity.createAttributes().build());
        event.put((EntityType)LATEX_DROP_POD.get(), LatexDropPodEntity.createAttributes().build());
        event.put((EntityType)HERTXVAR_F.get(), HertxvarFEntity.createAttributes().build());
        event.put((EntityType)HERTXVAR_SOL.get(), HertxvarSolEntity.createAttributes().build());
        event.put((EntityType)HERTXVAR_FB.get(), HertxvarFBEntity.createAttributes().build());
        event.put((EntityType)HERTX_SIT.get(), HertxSitEntity.createAttributes().build());
        event.put((EntityType)ASHBURY_HERTX.get(), AshburyHertxEntity.createAttributes().build());
        event.put((EntityType)ASHBURY_SIT.get(), AshburySitEntity.createAttributes().build());
        event.put((EntityType)BEE_HERTX_SIT.get(), BeeHertxSitEntity.createAttributes().build());
        event.put((EntityType)AHV_HERTX_SIT.get(), AHVHertxSitEntity.createAttributes().build());
        event.put((EntityType)NXT_SIT.get(), NXTSitEntity.createAttributes().build());
        event.put((EntityType)HERTX_F_SIT.get(), HertxFSitEntity.createAttributes().build());
        event.put((EntityType)HERTX_FB_SIT.get(), HertxFBSitEntity.createAttributes().build());
        event.put((EntityType)HERTX_SOL_WAIT.get(), HertxSolWaitEntity.createAttributes().build());
        event.put((EntityType)SLIMELING_TAMED.get(), SlimelingTamedEntity.createAttributes().build());
        event.put((EntityType)SLIMELINGTAMEDSIT.get(), SlimelingtamedsitEntity.createAttributes().build());
        event.put((EntityType)PROTECTOR_SLIMELING.get(), ProtectorSlimelingEntity.createAttributes().build());
        event.put((EntityType)PROTECTOR_SLIMELINGSIT.get(), ProtectorSlimelingsitEntity.createAttributes().build());
        event.put((EntityType)DARK_LATEX_CAKE.get(), DarkLatexCakeEntity.createAttributes().build());
        event.put((EntityType)DRONE_HERTX_WAIT.get(), DroneHertxWaitEntity.createAttributes().build());
        event.put((EntityType)ARMED_DRONE_HERTX_WAIT.get(), ArmedDroneHertxWaitEntity.createAttributes().build());
        event.put((EntityType)CIVILIAN_MILITIA_MELEE.get(), CivilianMilitiaMeleeEntity.createAttributes().build());
        event.put((EntityType)PRISIONER_MILITIA_MELEE.get(), PrisionerMilitiaMeleeEntity.createAttributes().build());
    }

    static {
        REGISTRY = DeferredRegister.create(ForgeRegistries.ENTITIES, "latex");
        SLIMELING = register("slimeling", Builder.of(SlimelingEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(SlimelingEntity::new).sized(0.6F, 2.0F));
        DARKLATEXSLUG = register("darklatexslug", Builder.of(DarklatexslugEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(24).setUpdateInterval(3).setCustomClientFactory(DarklatexslugEntity::new).sized(0.8F, 0.4F));
        DARKLATEX = register("darklatex", Builder.of(DarklatexEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(DarklatexEntity::new).sized(0.6F, 1.8F));
        DARK_LATEX_CENTAUR = register("dark_latex_centaur", Builder.of(DarkLatexCentaurEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(DarkLatexCentaurEntity::new).sized(0.4F, 0.7F));
        DARK_LATEX_SKELETON = register("dark_latex_skeleton", Builder.of(DarkLatexSkeletonEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(DarkLatexSkeletonEntity::new).sized(0.6F, 1.8F));
        YUFENG = register("yufeng", Builder.of(YufengEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(YufengEntity::new).sized(0.6F, 1.9F));
        NOISE_STALKER = register("noise_stalker", Builder.of(NoiseStalkerEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(48).setUpdateInterval(3).setCustomClientFactory(NoiseStalkerEntity::new).sized(0.8F, 2.2F));
        DLSHARK = register("dlshark", Builder.of(DlsharkEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(DlsharkEntity::new).sized(0.6F, 1.8F));
        DARK_LATEX_MOTH = register("dark_latex_moth", Builder.of(DarkLatexMothEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(DarkLatexMothEntity::new).sized(0.6F, 2.0F));
        DARK_LATEX_SNEP = register("dark_latex_snep", Builder.of(DarkLatexSnepEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(DarkLatexSnepEntity::new).sized(0.4F, 2.0F));
        DARK_LATEX_FOX = register("dark_latex_fox", Builder.of(DarkLatexFoxEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(DarkLatexFoxEntity::new).sized(0.6F, 1.8F));
        DARK_LATEX_FOX_SNIPER = register("dark_latex_fox_sniper", Builder.of(DarkLatexFoxSniperEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(DarkLatexFoxSniperEntity::new).sized(0.6F, 1.9F));
        DARK_LATEX_SNAKE = register("dark_latex_snake", Builder.of(DarkLatexSnakeEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(124).setUpdateInterval(3).setCustomClientFactory(DarkLatexSnakeEntity::new).sized(0.5F, 3.4F));
        DARK_LATEX_DRAGON = register("dark_latex_dragon", Builder.of(DarkLatexDragonEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(DarkLatexDragonEntity::new).sized(1.0F, 2.5F));
        DARK_LATEX_SPIDER = register("dark_latex_spider", Builder.of(DarkLatexSpiderEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(DarkLatexSpiderEntity::new).sized(0.8F, 2.0F));
        DL_SQUID_DOG = register("dl_squid_dog", Builder.of(DlSquidDogEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(DlSquidDogEntity::new).sized(0.8F, 2.2F));
        D_LBEE = register("d_lbee", Builder.of(DLbeeEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(DLbeeEntity::new).sized(0.6F, 1.9F));
        DARK_LATEX_QUEEN_BEE = register("dark_latex_queen_bee", Builder.of(DarkLatexQueenBeeEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(DarkLatexQueenBeeEntity::new).sized(0.8F, 2.0F));
        DARK_LATEX_SPIDER_QUEEN = register("dark_latex_spider_queen", Builder.of(DarkLatexSpiderQueenEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(DarkLatexSpiderQueenEntity::new).sized(1.2F, 3.6F));
        DARKLATEXCONE = register("darklatexcone", Builder.of(DarklatexconeEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(84).setUpdateInterval(3).setCustomClientFactory(DarklatexconeEntity::new).sized(0.6F, 1.8F));
        HERTX = register("hertx", Builder.of(HertxEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(HertxEntity::new).sized(0.7F, 2.0F));
        DRONE_HERTX = register("drone_hertx", Builder.of(DroneHertxEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(108).setUpdateInterval(3).setCustomClientFactory(DroneHertxEntity::new).fireImmune().sized(0.7F, 2.0F));
        ARMED_DRONE_HERTX = register("armed_drone_hertx", Builder.of(ArmedDroneHertxEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(116).setUpdateInterval(3).setCustomClientFactory(ArmedDroneHertxEntity::new).fireImmune().sized(0.7F, 2.0F));
        SCIENTIST = register("scientist", Builder.of(ScientistEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(ScientistEntity::new).sized(0.6F, 1.8F));
        MILITARY = register("military", Builder.of(MilitaryEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(MilitaryEntity::new).sized(0.6F, 1.8F));
        MILITARYFLAMEUNIT = register("militaryflameunit", Builder.of(MilitaryflameunitEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(MilitaryflameunitEntity::new).fireImmune().sized(0.6F, 1.8F));
        EVIL_SCIENTIST = register("evil_scientist", Builder.of(EvilScientistEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(EvilScientistEntity::new).sized(0.6F, 1.8F));
        EVIL_SNIPER = register("evil_sniper", Builder.of(EvilSniperEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(EvilSniperEntity::new).sized(0.6F, 1.8F));
        EVIL_MILITARY = register("evil_military", Builder.of(EvilMilitaryEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(EvilMilitaryEntity::new).sized(0.6F, 1.8F));
        TSC_OUTSIDER = register("tsc_outsider", Builder.of(TSCOutsiderEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(TSCOutsiderEntity::new).fireImmune().sized(0.6F, 1.8F));
        TSC_OUTSIDER_GUNNER = register("tsc_outsider_gunner", Builder.of(TSCOutsiderGunnerEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(TSCOutsiderGunnerEntity::new).fireImmune().sized(0.6F, 1.8F));
        TS_CDRONE = register("ts_cdrone", Builder.of(TSCdroneEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(TSCdroneEntity::new).fireImmune().sized(0.6F, 1.8F));
        TSC_HUNTER = register("tsc_hunter", Builder.of(TSCHunterEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(TSCHunterEntity::new).fireImmune().sized(0.7F, 2.5F));
        MILITARY_RIOT = register("military_riot", Builder.of(MilitaryRiotEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(MilitaryRiotEntity::new).sized(0.6F, 1.8F));
        TSC_BERSERK = register("tsc_berserk", Builder.of(TSCBerserkEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(TSCBerserkEntity::new).fireImmune().sized(0.7F, 2.1F));
        DARK_LATEX_CREEPER = register("dark_latex_creeper", Builder.of(DarkLatexCreeperEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(DarkLatexCreeperEntity::new).sized(0.6F, 2.0F));
        DARK_LATEX_CREEPER_ENHANCED = register("dark_latex_creeper_enhanced", Builder.of(DarkLatexCreeperEnhancedEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(DarkLatexCreeperEnhancedEntity::new).sized(0.8F, 3.0F));
        CIVILIAN = register("civilian", Builder.of(CivilianEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(CivilianEntity::new).sized(0.6F, 1.8F));
        PRISIONER = register("prisioner", Builder.of(PrisionerEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(PrisionerEntity::new).sized(0.6F, 1.8F));
        PRISIONERMILITIA = register("prisionermilitia", Builder.of(PrisionermilitiaEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(PrisionermilitiaEntity::new).sized(0.6F, 1.8F));
        CIVLIAN_MILITIA = register("civlian_militia", Builder.of(CivlianMilitiaEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(CivlianMilitiaEntity::new).sized(0.6F, 1.8F));
        CRYSTALBOW = register("projectile_crystalbow", Builder.of(CrystalbowEntity::new, MobCategory.MISC).setCustomClientFactory(CrystalbowEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5F, 0.5F));
        LATEXCANNON = register("projectile_latexcannon", Builder.of(LatexcannonEntity::new, MobCategory.MISC).setCustomClientFactory(LatexcannonEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5F, 0.5F));
        REVOLVING_GOO_CANNON = register("projectile_revolving_goo_cannon", Builder.of(RevolvingGooCannonEntity::new, MobCategory.MISC).setCustomClientFactory(RevolvingGooCannonEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5F, 0.5F));
        DARTRIFLE = register("projectile_dartrifle", Builder.of(DartrifleEntity::new, MobCategory.MISC).setCustomClientFactory(DartrifleEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5F, 0.5F));
        MATCHLOCK_PISTOL = register("projectile_matchlock_pistol", Builder.of(MatchlockPistolEntity::new, MobCategory.MISC).setCustomClientFactory(MatchlockPistolEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5F, 0.5F));
        MATCH_LOCK_MUSKET = register("projectile_match_lock_musket", Builder.of(MatchLockMusketEntity::new, MobCategory.MISC).setCustomClientFactory(MatchLockMusketEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5F, 0.5F));
        AR_70_ASSAULT_RIFLE = register("projectile_ar_70_assault_rifle", Builder.of(AR70AssaultRifleEntity::new, MobCategory.MISC).setCustomClientFactory(AR70AssaultRifleEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5F, 0.5F));
        M_4_ASSAULT_RIFLE = register("projectile_m_4_assault_rifle", Builder.of(M4AssaultRifleEntity::new, MobCategory.MISC).setCustomClientFactory(M4AssaultRifleEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5F, 0.5F));
        SCRAP_M_16_RIFLE = register("projectile_scrap_m_16_rifle", Builder.of(ScrapM16RifleEntity::new, MobCategory.MISC).setCustomClientFactory(ScrapM16RifleEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5F, 0.5F));
        TSC_PISTOL = register("projectile_tsc_pistol", Builder.of(TSCPistolEntity::new, MobCategory.MISC).setCustomClientFactory(TSCPistolEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5F, 0.5F));
        OVERUNDERSHOTGUN = register("projectile_overundershotgun", Builder.of(OverundershotgunEntity::new, MobCategory.MISC).setCustomClientFactory(OverundershotgunEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5F, 0.5F));
        FLAMETHOWER = register("projectile_flamethower", Builder.of(FlamethowerEntity::new, MobCategory.MISC).setCustomClientFactory(FlamethowerEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5F, 0.5F));
        LATEX_DART_RIFLE = register("projectile_latex_dart_rifle", Builder.of(LatexDartRifleEntity::new, MobCategory.MISC).setCustomClientFactory(LatexDartRifleEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5F, 0.5F));
        DARK_LATEX_FOX_SCIENTIST = register("dark_latex_fox_scientist", Builder.of(DarkLatexFoxScientistEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(DarkLatexFoxScientistEntity::new).sized(0.6F, 1.8F));
        BEE_HERTX = register("bee_hertx", Builder.of(BeeHertxEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(BeeHertxEntity::new).sized(0.6F, 2.3F));
        AHV_HERTX = register("ahv_hertx", Builder.of(AHVHertxEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(AHVHertxEntity::new).sized(0.7F, 2.0F));
        TANK_CANNON = register("projectile_tank_cannon", Builder.of(TankCannonEntity::new, MobCategory.MISC).setCustomClientFactory(TankCannonEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5F, 0.5F));
        LA_4TANKMORPHR = register("la_4tankmorphr", Builder.of(La4tankmorphrEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(La4tankmorphrEntity::new).fireImmune().sized(1.1F, 4.2F));
        LA_4TANKMORPHM = register("la_4tankmorphm", Builder.of(La4tankmorphmEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(La4tankmorphmEntity::new).fireImmune().sized(1.1F, 4.2F));
        NXT_HERTX = register("nxt_hertx", Builder.of(NXTHertxEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(100).setUpdateInterval(3).setCustomClientFactory(NXTHertxEntity::new).sized(0.7F, 2.0F));
        DROPPOD = register("droppod", Builder.of(DROPPODEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(DROPPODEntity::new).fireImmune().sized(1.2F, 2.2F));
        SNEPPLE = register("projectile_snepple", Builder.of(SneppleEntity::new, MobCategory.MISC).setCustomClientFactory(SneppleEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5F, 0.5F));
        ALLYDROPPOD = register("allydroppod", Builder.of(AllydroppodEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(AllydroppodEntity::new).fireImmune().sized(1.2F, 2.2F));
        LATEX_DROP_POD = register("latex_drop_pod", Builder.of(LatexDropPodEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(LatexDropPodEntity::new).fireImmune().sized(1.2F, 2.2F));
        HERTXVAR_F = register("hertxvar_f", Builder.of(HertxvarFEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(HertxvarFEntity::new).sized(0.7F, 2.0F));
        HERTXVAR_SOL = register("hertxvar_sol", Builder.of(HertxvarSolEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(HertxvarSolEntity::new).sized(0.7F, 2.0F));
        HERTXVAR_FB = register("hertxvar_fb", Builder.of(HertxvarFBEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(HertxvarFBEntity::new).sized(0.7F, 2.1F));
        HERTX_SIT = register("hertx_sit", Builder.of(HertxSitEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(32).setUpdateInterval(3).setCustomClientFactory(HertxSitEntity::new).sized(0.8F, 1.2F));
        ASHBURY_HERTX = register("ashbury_hertx", Builder.of(AshburyHertxEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(AshburyHertxEntity::new).sized(0.7F, 2.0F));
        ASHBURY_SIT = register("ashbury_sit", Builder.of(AshburySitEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(32).setUpdateInterval(3).setCustomClientFactory(AshburySitEntity::new).sized(0.8F, 1.2F));
        BEE_HERTX_SIT = register("bee_hertx_sit", Builder.of(BeeHertxSitEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(32).setUpdateInterval(3).setCustomClientFactory(BeeHertxSitEntity::new).sized(0.8F, 1.2F));
        AHV_HERTX_SIT = register("ahv_hertx_sit", Builder.of(AHVHertxSitEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(32).setUpdateInterval(3).setCustomClientFactory(AHVHertxSitEntity::new).sized(0.8F, 1.2F));
        NXT_SIT = register("nxt_sit", Builder.of(NXTSitEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(32).setUpdateInterval(3).setCustomClientFactory(NXTSitEntity::new).sized(0.8F, 1.2F));
        HERTX_F_SIT = register("hertx_f_sit", Builder.of(HertxFSitEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(32).setUpdateInterval(3).setCustomClientFactory(HertxFSitEntity::new).sized(0.8F, 1.2F));
        HERTX_FB_SIT = register("hertx_fb_sit", Builder.of(HertxFBSitEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(32).setUpdateInterval(3).setCustomClientFactory(HertxFBSitEntity::new).sized(0.8F, 1.5F));
        HERTX_SOL_WAIT = register("hertx_sol_wait", Builder.of(HertxSolWaitEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(HertxSolWaitEntity::new).sized(0.7F, 2.0F));
        SLIMELING_TAMED = register("slimeling_tamed", Builder.of(SlimelingTamedEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(3).setCustomClientFactory(SlimelingTamedEntity::new).sized(0.6F, 2.0F));
        SLIMELINGTAMEDSIT = register("slimelingtamedsit", Builder.of(SlimelingtamedsitEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(32).setUpdateInterval(3).setCustomClientFactory(SlimelingtamedsitEntity::new).sized(0.8F, 1.2F));
        PROTECTOR_SLIMELING = register("protector_slimeling", Builder.of(ProtectorSlimelingEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(72).setUpdateInterval(3).setCustomClientFactory(ProtectorSlimelingEntity::new).sized(0.6F, 2.0F));
        PROTECTOR_SLIMELINGSIT = register("protector_slimelingsit", Builder.of(ProtectorSlimelingsitEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(32).setUpdateInterval(3).setCustomClientFactory(ProtectorSlimelingsitEntity::new).sized(0.8F, 1.2F));
        DARK_LATEX_CAKE = register("dark_latex_cake", Builder.of(DarkLatexCakeEntity::new, MobCategory.MONSTER).setShouldReceiveVelocityUpdates(true).setTrackingRange(72).setUpdateInterval(3).setCustomClientFactory(DarkLatexCakeEntity::new).sized(0.6F, 1.8F));
        DRONE_HERTX_WAIT = register("drone_hertx_wait", Builder.of(DroneHertxWaitEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(DroneHertxWaitEntity::new).fireImmune().sized(0.7F, 1.2F));
        ARMED_DRONE_HERTX_WAIT = register("armed_drone_hertx_wait", Builder.of(ArmedDroneHertxWaitEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(128).setUpdateInterval(3).setCustomClientFactory(ArmedDroneHertxWaitEntity::new).fireImmune().sized(0.7F, 2.0F));
        EXPLOSIVEGOO = register("projectile_explosivegoo", Builder.of(ExplosivegooEntity::new, MobCategory.MISC).setCustomClientFactory(ExplosivegooEntity::new).setShouldReceiveVelocityUpdates(true).setTrackingRange(64).setUpdateInterval(1).sized(0.5F, 0.5F));
        CIVILIAN_MILITIA_MELEE = register("civilian_militia_melee", Builder.of(CivilianMilitiaMeleeEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(CivilianMilitiaMeleeEntity::new).sized(0.6F, 1.8F));
        PRISIONER_MILITIA_MELEE = register("prisioner_militia_melee", Builder.of(PrisionerMilitiaMeleeEntity::new, MobCategory.CREATURE).setShouldReceiveVelocityUpdates(true).setTrackingRange(96).setUpdateInterval(3).setCustomClientFactory(PrisionerMilitiaMeleeEntity::new).sized(0.6F, 1.8F));
    }
}
